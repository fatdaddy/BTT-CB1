[include shell_command.cfg]
[include My_Macros.cfg]
#[include fluidd.cfg]

[virtual_sdcard]
path: ~/printer_data/gcodes

#path: /home/biqu/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[include mainsail.cfg]

# host MCU service is preinstalled and ready to use with:
[mcu CB1]
serial: /tmp/klipper_host_mcu

# This file contains common pin mappings for the BIGTREETECH Octopus Max EZ.
# To use this config, the firmware should be compiled for the
 #STM32H723 with a "128KiB bootloader", "25 MHz crystal",
 #and one of:
 #Communication interface: "USB (on PA11/PA12)",
# Communication interface: "CAN bus (on PD0/PD1)", or
# Communication interface: "USB to CAN bus bridge (USB on PA11/PA12))" and CAN bus interface: "CAN bus (on PD0/PD1)".

# See docs/Config_Reference.md for a description of parameters.

# Motor-1
[stepper_x]
step_pin: PC13
dir_pin: PC14
enable_pin: !PE6
microsteps: 16
rotation_distance: 40
endstop_pin: !PF0
position_endstop: 0
position_max: 308
homing_speed: 75

# Motor-2
[stepper_y]
step_pin: PE4
dir_pin: PE5
enable_pin: !PE3
microsteps: 16
rotation_distance: 40
endstop_pin: !PF2
position_endstop: 0
position_max: 303
homing_speed: 75

# Motor-3
[stepper_z]
step_pin: PE1
dir_pin: !PE0
enable_pin: !PE2
microsteps: 16
rotation_distance: 4
endstop_pin: ^!PF4
#position_endstop: 0.5
position_max: 270
position_min: -2.0
homing_speed: 8.0
second_homing_speed: 3
homing_retract_dist: 3


# Motor-4
# The Octopus only has 4 heater outputs which leaves an extra stepper
# This can be used for a second Z stepper, dual_carriage, extruder co-stepper,
# or other accesory such as an MMU
#[stepper_]
#step_pin: PB8
#dir_pin: PB9
#enable_pin: PB7
#endstop_pin: PF3
#...

# Motor-5
[extruder]
step_pin: PB5
dir_pin: !PB4
enable_pin: !PB6
microsteps: 16
rotation_distance: 7.473
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PF6 # HE0
sensor_pin:  PB0 # T0
sensor_type: ATC Semitec 104NT-4-R025H42G
pressure_advance: 0.086
pressure_advance_smooth_time: 0.040
#control: pid
#pid_Kp: 22.2
#pid_Ki: 1.08
#pid_Kd: 114
min_temp: 0
max_temp: 275

#[filament_switch_sensor material_0]
#switch_pin: PF1

# Motor-6
#[extruder1]
#step_pin: PG15
#dir_pin: PB3
#enable_pin: !PD5
#heater_pin: PA0 # HE1
#sensor_pin: PC5 # T1
#...

#[filament_switch_sensor material_1]
#switch_pin: PC15

# Motor-7
#[extruder2]
#step_pin: PD3
#dir_pin: PD2
#enable_pin: !PD4
#heater_pin: PF9 # HE2
#sensor_pin: PC4 # T2
#...

# Motor-8
#[extruder3]
#step_pin: PA10
#dir_pin: PA9
#enable_pin: !PA15
#heater_pin: PF7 # HE3
#sensor_pin: PA7 # T3
#...

# Motor-9
#[extruder4]
#step_pin: PA8
#dir_pin: PC7
#enable_pin: !PC9
#...

# Motor-10
#[extruder5]
#step_pin: PG6
#dir_pin: PC6
#enable_pin: !PC8
#...

########################################
# TMC2209 configuration
########################################

[tmc2209 stepper_x]
uart_pin: PG14
diag_pin: PF0
run_current: 0.900
stealthchop_threshold: 999999

[tmc2209 stepper_y]
uart_pin: PG13
diag_pin: PF2
run_current: 0.900
stealthchop_threshold: 999999

[tmc2209 stepper_z]
uart_pin: PG12
diag_pin: PF4
run_current: 0.750
stealthchop_threshold: 999999

#[tmc2209 stepper_]
#uart_pin: PG11
##diag_pin: PF3
#run_current: 0.650
#stealthchop_threshold: 999999

[tmc2209 extruder]
uart_pin: PG10
run_current: 0.700
stealthchop_threshold: 999999

#[tmc2209 extruder1]
#uart_pin: PG9
#run_current: 0.800
#stealthchop_threshold: 999999

#[tmc2209 extruder2]
#uart_pin: PD7
#run_current: 0.800
#stealthchop_threshold: 999999

#[tmc2209 extruder3]
#uart_pin: PD6
#run_current: 0.800
#stealthchop_threshold: 999999

#[tmc2209 extruder4]
#uart_pin: PG8
#run_current: 0.800
#stealthchop_threshold: 999999

#[tmc2209 extruder5]
#uart_pin: PG7
#run_current: 0.800
#stealthchop_threshold: 999999


[heater_bed]
heater_pin: PF5
sensor_pin: PB1 # TB
sensor_type: EPCOS 100K B57560G104F
#control: pid
#pid_Kp: 22.2
#pid_Ki: 1.08
#pid_Kd: 114
min_temp: 0
max_temp: 100


[heater_fan hotend_cooling_fan]
pin: PA6
max_power: 1
kick_start_time:1
off_below: .40
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#enable_pin:b


[fan]
pin: PA5
#   Output pin controlling the fan. This parameter must be provided.
#max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   pin may be set to. The value 1.0 allows the pin to be set fully
#   enabled for extended periods, while a value of 0.5 would allow the
#   pin to be enabled for no more than half the time. This setting may
#   be used to limit the total power output (over extended periods) to
#   the fan. If this value is less than 1.0 then fan speed requests
#   will be scaled between zero and max_power (for example, if
#   max_power is .9 and a fan speed of 80% is requested then the fan
#   power will be set to 72%). The default is 1.0.
#shutdown_speed: 0
#   The desired fan speed (expressed as a value from 0.0 to 1.0) if
#   the micro-controller software enters an error state. The default
#   is 0.
#cycle_time: 0.010
#   The amount of time (in seconds) for each PWM power cycle to the
#   fan. It is recommended this be 10 milliseconds or greater when
#   using software based PWM. The default is 0.010 seconds.
#hardware_pwm: False
#   Enable this to use hardware PWM instead of software PWM. Most fans
#   do not work well with hardware PWM, so it is not recommended to
#   enable this unless there is an electrical requirement to switch at
#   very high speeds. When using hardware PWM the actual cycle time is
#   constrained by the implementation and may be significantly
#   different than the requested cycle_time. The default is False.
#kick_start_time: 0.100
#   Time (in seconds) to run the fan at full speed when either first
#   enabling or increasing it by more than 50% (helps get the fan
#   spinning). The default is 0.100 seconds.
#off_below: 0.0
#   The minimum input speed which will power the fan (expressed as a
#   value from 0.0 to 1.0). When a speed lower than off_below is
#   requested the fan will instead be turned off. This setting may be
#   used to prevent fan stalls and to ensure kick starts are
#   effective. The default is 0.0.
#
#   This setting should be recalibrated whenever max_power is adjusted.
#   To calibrate this setting, start with off_below set to 0.0 and the
#   fan spinning. Gradually lower the fan speed to determine the lowest
#   input speed which reliably drives the fan without stalls. Set
#   off_below to the duty cycle corresponding to this value (for
#   example, 12% -> 0.12) or slightly higher.
#tachometer_pin:
#   Tachometer input pin for monitoring fan speed. A pullup is generally
#   required. This parameter is optional.
#tachometer_ppr: 2
#   When tachometer_pin is specified, this is the number of pulses per
#   revolution of the tachometer signal. For a BLDC fan this is
#   normally half the number of poles. The default is 2.
#tachometer_poll_interval: 0.0015
#   When tachometer_pin is specified, this is the polling period of the
#   tachometer pin, in seconds. The default is 0.0015, which is fast
#   enough for fans below 10000 RPM at 2 PPR. This must be smaller than
#   30/(tachometer_ppr*rpm), with some margin, where rpm is the
#   maximum speed (in RPM) of the fan.
#enable_pin:
#   Optional pin to enable power to the fan. This can be useful for fans
#   with dedicated PWM inputs. Some of these fans stay on even at 0% PWM
#   input. In such a case, the PWM pin can be used normally, and e.g. a
#   ground-switched FET(standard fan pin) can be used to control power to
#   the fan.


#[heater_fan fan2]
#pin: PA4


[controller_fan my_controller_fan]
pin: PA3
#max_power:
#shutdown_speed:
#cycle_time:
#hardware_pwm:
#kick_start_time:
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#enable_pin:
#   See the "fan" section for a description of the above parameters.
#fan_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when a heater or stepper driver is active.
#   The default is 1.0
#idle_timeout:
#   The amount of time (in seconds) after a stepper driver or heater
#   was active and the fan should be kept running. The default
#   is 30 seconds.
#idle_speed:
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when a heater or stepper driver was active and
#   before the idle_timeout is reached. The default is fan_speed.
#heater:
#stepper:
#   Name of the config section defining the heater/stepper that this fan
#   is associated with. If a comma separated list of heater/stepper names
#   is provided here, then the fan will be enabled when any of the given
#   heaters/steppers are enabled. The default heater is "extruder", the
#   default stepper is all of them.


#[heater_fan fan4]
#pin: PA1
#tachometer_pin: PC3

#[heater_fan fan5]
#pin: PF8
#tachometer_pin: PC1

#[heater_fan fan6]
#pin: PA2
#tachometer_pin: PC2

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_1B001A000C51313236343430-if00


[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100


[board_pins]
aliases:
    # FPC header, Aliases EXP1 & EXP2 for mini12864
    EXP1_1=PG2, EXP1_2=PD15,
    EXP1_3=PD14, EXP1_4=PD13,
    EXP1_5=PD12, EXP1_6=PD11,
    EXP1_7=PD10, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PE13, EXP2_2=PE12,
    EXP2_3=PG5, EXP2_4=PE11,
    EXP2_5=PG4, EXP2_6=PE14,
    EXP2_7=PG3, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<NC>

# See the sample-lcd.cfg file for definitions of common LCD displays.

[bltouch]
stow_on_each_sample: False
probe_with_touch_mode: True
sensor_pin: ^PB15
control_pin: PB14
x_offset: 46.0
y_offset: -25.5
#z_offset: 1.7
speed: 5.0
sample_retract_dist: 5.0
samples: 2

[safe_z_home]
home_xy_position: 170, 175 # Change coordinates to the center of your print bed
speed: 100
z_hop: 5                # Move up 10mm
z_hop_speed: 5


# Proximity switch
#[probe]
#pin: PF11

#[output_pin ps_on_pin]
#pin: PF13

#[output_pin pf12_pin]
#pin: PF12

[neopixel my_neopixel]
pin: PE10
chain_count: 21
color_order: GRB
#   Set the pixel order required by the LED hardware (using a string
#   containing the letters R, G, B, W with W optional). Alternatively,
#   this may be a comma separated list of pixel orders - one for each
#   LED in the chain. The default is GRB.
initial_RED: 1.0
initial_GREEN: 1.0
initial_BLUE: 1.0
#initial_WHITE: 0.0
#   See the "led" section for information on these parameters.


[neopixel my_neopixe2]
pin: PE9
chain_count: 21
color_order: GRB
#   Set the pixel order required by the LED hardware (using a string
#   containing the letters R, G, B, W with W optional). Alternatively,
#   this may be a comma separated list of pixel orders - one for each
#   LED in the chain. The default is GRB.
initial_RED: 1.0
initial_GREEN: 1.0
initial_BLUE: 1.0
#initial_WHITE: 0.0
#   See the "led" section for information on these parameters.


#[hall_filament_width_sensor]
#adc1: PC0
#adc2: PF10

#[adxl345]
#cs_pin: PF14
#spi_bus: spi4

[bed_mesh]
speed: 100
horizontal_move_z: 5
mesh_min: 46,16
mesh_max: 300,277
probe_count: 5,5

[bed_screws]
screw1: 19, 15
screw2: 308, 15
screw3: 308, 303
screw4: 19, 303
screw5: 170, 175


#[screws_tilt_adjust]
#screw1: 0,42
#screw1_name: front left
#screw2:  0,305
#screw2_name: back left
#screw3:  305,264
#screw3_name: back right
#screw4:  264,42
#screw4_name: front right
#speed: 50
#horizontal_move_z: 5
#screw_thread: CW-M3

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [stepper_z]
#*# position_endstop = 0.290
#*#
#*# [bltouch]
#*# z_offset = 3.574
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 22.826
#*# pid_ki = 2.205
#*# pid_kd = 59.062
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 75.397
#*# pid_ki = 1.637
#*# pid_kd = 868.007
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	0.136625, 0.006000, -0.094625, -0.004000, 0.071625
#*# 	0.089750, 0.031000, -0.031500, -0.016500, 0.039750
#*# 	0.042250, -0.008375, -0.070250, -0.035875, -0.053375
#*# 	0.133500, -0.007750, -0.070875, -0.049625, -0.036500
#*# 	0.172250, -0.015875, -0.080250, -0.019625, 0.037875
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 46.0
#*# max_x = 300.0
#*# min_y = 16.0
#*# max_y = 277.0
#*#
#*# [bed_mesh default1]
#*# version = 1
#*# points =
#*# 	0.291000, 0.314125, 0.259750, 0.266625, 0.116000
#*# 	0.371000, 0.409125, 0.366000, 0.351000, 0.324125
#*# 	0.383500, 0.366625, 0.330375, 0.361000, 0.292250
#*# 	0.447250, 0.369750, 0.318500, 0.340375, 0.308500
#*# 	0.398500, 0.331000, 0.286000, 0.324750, 0.236625
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 46.0
#*# max_x = 300.0
#*# min_y = 16.0
#*# max_y = 277.0
